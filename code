library(matrixStats)
library(dplyr)
library(survcomp)

transf <- function(x) -log(x)

all_comb <- function(n){
  do.call(rbind,
          lapply(X = 1:n, FUN = function(i){
            t(combn(x = 1:n, m = i, FUN = function(x) c(x, rep(0,n-i))))
          })
  )
}


csStat.H0.func<-function(m,N.sim)
  {
  stat.H0.p<-matrix(runif(N.sim*m), nrow = m)
  stat.H0<-apply(stat.H0.p,2,log)*(-1) #data are -log transformed
  stat.H0sort <- apply(stat.H0,2,sort,decreasing=TRUE) #sort
  csStat.H0 <- apply(stat.H0sort,2,cummean) #cummeans are calculated
  csStat.H0
  }



omnibus.test  <- function (p, N.sim=100000)   #test for omnibus with log transformation (global test)
{
  m<-length(p)
  set.seed(2404) 
  csStat.H0<-csStat.H0.func(m,N.sim)
  p <- matrix(p, ncol = 1)
  stat <- -log(p)
  
  csStat <- colCumsums(apply(stat, 2, sort, decreasing = TRUE))/1:m #cummeans
  for (h in 1:m) {
    csStat[h, ] <- ecdf(csStat.H0[h, ])(csStat[h, ]) #rank of observed cumsums
    csStat.H0[h, ] <- rank(csStat.H0[h, ])/ncol(csStat.H0) #rank of observed cumsums given H0
  }
  1 - ecdf(colMaxs(csStat.H0))(colMaxs(csStat)) # ) #    #colMaxs(csStat) teststat... rank of observed cumsums among all ranks given H=
}


omnibus.test(c(0.05,0.13))
#0.05063

closed.test<-function(p,alpha,method="stouffer",N.sim=100)
{
  m<-length(p)
  allcombs<-all_comb(m)
  bincombinations<-matrix(0,ncol=m,nrow=nrow(allcombs))
  
  for (i in 1:nrow(bincombinations))
    bincombinations[i,c(allcombs[i,])]<-TRUE
  
  rejected<-rep(0,(2^m - 1))
  pall<-vector(length=(2^m - 1))
  pall[1:m]<-p
  rejected[1:m]<-p<=alpha
  
  if (sum(rejected[1:m])>0) #nur wenn mind 1 Hyp<=alpha geht es weiter
  {
    for (j in (m+1):(2^m - 1))  
      {
      if (method=="omnibus") pall[j]<-omnibus.test(p[allcombs[j,]],N.sim)
      if (method=="fisher") pall[j]<-combine.test(p[allcombs[j,]],method="fisher")#combine.test(selection,method="fisher")
      if (method=="stouffer") pall[j]<-combine.test(p[allcombs[j,]],method="z.transform")#combine.test(selection,method="fisher")
      }

  }
  
  rres<-(bincombinations*pall)<=alpha
  result<-apply(rres,2,sum)!=(2^m - 1)  #FALSE..H1, TRUE..H0
  result
}



closed.test(c(0.05,0.11),0.05,method="fisher",N.sim=100)
  
load("Tnew.H0.Rdata")
load("Tnew.H0a.Rdata")
load("Tnew.H0.fi.Rdata")
load("Tnew.H0a.fi.Rdata")
load("Tnew.H0.st.Rdata")
load("Tnew.H0a.st.Rdata")


test.consonance  <- function (p, alpha,method="fisher",N.sim)   
{
  m<-length(p)
  
  allcombs<-all_comb(m)
  bincombinations<-matrix(0,ncol=m,nrow=nrow(allcombs))
  
  for (i in 1:nrow(bincombinations))
    bincombinations[i,c(allcombs[i,])]<-TRUE
  
  rejected<-rep(0,(2^m - 1))
  pall<-vector(length=(2^m - 1))
  pall[1:m]<-p
  rejected[1:m]<-p<=alpha ####da kann ich dann eigentlich aufhoeren, falls alles 0!!!
  
  for (j in (m+1):(2^m - 1))  
  {
    pval<-p[allcombs[j,]]
    m.temp<-length(pval)
    index<-allcombs[j,][allcombs[j,]>0]
    laststagecomb<-t(combn(index,m.temp-1))
    laststagecomb1<-cbind(laststagecomb,matrix(0,nrow=m.temp,ncol=m-m.temp+1))#cbind(laststagecomb,matrix(rep(0,m-m.temp+1),)
    pval.index<-apply(laststagecomb1,1,row.match,data.frame(allcombs))
    p.laststage<-pall[pval.index]
    
    
    if (method=="omnibus")
      {
      stat <- transf(matrix(pval, ncol = 1))#
      csStat <- colCumsums(apply(stat, 2, sort, decreasing = TRUE))/1:m.temp#
      csStat.H0<-csStat.H0.func(m.temp,N.sim)
      for (h in 1:m.temp) #
        {
          csStat[h, ] <- ecdf(csStat.H0[h, ])(csStat[h, ])#
          csStat.H0[h, ] <- rank(csStat.H0[h, ])/ncol(csStat.H0)# #cumulativen summen werden zu glv. umgerechnet 
        }
    T1<-ecdf(colMaxs(csStat.H0))(colMaxs(csStat)) # ) #1-p-value
    }
    
      if (method=="fisher") T1<-1-combine.test(pval,method="fisher") #-2 * sum(log(p))  #combine.test(p,method="fisher")
      if (method=="stouffer")T1<-1-combine.test(pval,method="z.transform") #-2 * sum(log(p))  #combine.test(p,method="fisher") 
      
    Tnew<-min(T1,sum(p.laststage <=alpha)>=(m.temp-1))
    
    if (alpha==0.05)
      {
      if (method=="omnibus") Tnew.Hnull<-Tnew.H0[[m.temp-1]]
      if (method=="fisher") Tnew.Hnull<-Tnew.H0.fi[[m.temp-1]]
      if (method=="stouffer") Tnew.Hnull<-Tnew.H0.st[[m.temp-1]]
      }
    if (alpha==0.025)
      {
      if (method=="omnibus") Tnew.Hnull<-Tnew.H0a[[m.temp-1]]
      if (method=="fisher") Tnew.Hnull<-Tnew.H0a.fi[[m.temp-1]]
      if (method=="stouffer") Tnew.Hnull<-Tnew.H0a.st[[m.temp-1]]
      }
    pall[j]<-sum(Tnew.Hnull >= Tnew) / length(Tnew.Hnull) #schnellere Version fuer Vektor
  }
  
  rres<-(bincombinations*pall)<=alpha
  result<-apply(rres,2,sum)!=(2^m - 1)  #FALSE..H1, TRUE..H0
  
  list(result,tail(pall,n=1))
}


#EXAMPLE

p<-c(0.05,.1,.1) #vector of elementary p-values
test.consonance(p,alpha=0.05,method="omnibus",N.sim=10000)
test.consonance(p,alpha=0.05,method="fisher")
test.consonance(p,alpha=0.05,method="stouffer")
